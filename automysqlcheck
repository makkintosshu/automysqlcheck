#!/usr/bin/env bash
#
# automysqlcheck.sh
#
# This is a small bash script that checks all mysql databases for errors
# and mails a log file to a specified email address. All variables are
# hardcoded for ease of use with cron. Any databases you wish not to check
# should be added to the DBEXCLUDE list, with a space in between each name.
#
# Original version by sbray@csc.uvic.ca, UVic Fine Arts 2004
#
# Modified by eyechart AT gmail.com, Mickael Sundberg at mickael@pischows.se,
# Jake Carr jake-+AT+-websitesource-+DOT+-com, Fabrizio La Rosa, Morgan
# Aldridge morgant-+AT+-makkintosshu-+DOT+-com
# 
#=====================================================================
# Change Log
#=====================================================================
#
# VER 1.6 - (2019-11-03)
#     Use MySQL options file for authetication information
#     Modified by Morgan Aldridge
# VER 1.5 - (2011-06-10)
#     Modified to use more modern & consistent bash conventions
#     Switched to using the mysql '-e' option to execute commands in all cases
#     Modified by Morgan Aldridge
# VER 1.4 - (2010-10-18)
#     Added I/O redirection to $LOGFILE
#     Added flush & lock tables before check
#     Modified the database exclusion so that it works also with Darwin/Mac OS X
#     Modified by Fabrizio La Rosa
# VER 1.3 - (2006-12-02)
#     Added --host=$DBHOST in mysql commands, so it's useful for non-localhost situations
#     Modified by Jake Carr
# VER 1.2 - (2006-10-29)
#     Added "\`" arround the tables in $DBTABLES, otherwise it'll create
#         errors if tablenames containt characters like -.
#     Modified by Mickael Sundberg
# VER 1.1 - (2005-02-22)
#     Named script automysqlcheck.sh
#     Added PATH variable to make this script more CRON friendly
#     Removed the $DBTABLES loop and replaced it with single command
#        that executes the CHECK TABLE command on all tables in a given DB
#     Changed code to only check MyISAM and InnoDB tables
#     Cleaned up output to make the email prettier
#     Modified script to skip databases that have no tables
#     Modified by eyechart
# VER 1 - (2004-09-24)
#     Initial release by sbray@csc.uvic.ca
# 

# system variables (change these according to your system)
PATH=/usr/local/bin:/usr/bin:/bin:$PATH
OPTIONS_FILE="${HOME}/.my.cnf"
dbhost=localhost
logfile=/var/log/automysqlcheck.log
mailto=root@localhost
type1= # extra params to CHECK_TABLE e.g. FAST
type2=
corrupt=no # start by assuming no corruption
dbnames="all" # either "all" or a list delimited by space
dbexclude="" # either "" or a list delimited by space

# I/O redirection...
touch $logfile
exec 6>&1
exec > $logfile # stdout redirected to $LOGFILE
echo -n "AutoMySQLCheck: "
date
echo "---------------------------------------------------------"; echo; echo

# Get our list of databases to check...
if [ "$dbnames" = "all" ] ; then
	dbnames=""
	alldb="$(mysql --defaults-file="$OPTIONS_FILE" --host=$dbhost --batch -N -e "SHOW DATABASES;")"
	for i in $alldb ; do
		includedb=1
		for j in $dbexclude ; do
			if [ "$i" = "$j" ] ; then
				includedb=0
			fi
		done
		if [ $includedb -eq 1 ] ; then
			dbnames="$dbnames $i"
		fi
	done
fi

# Lock tables
mysql --defaults-file="$OPTIONS_FILE" --host=$dbhost --batch -N -e "FLUSH TABLES WITH READ LOCK; FLUSH LOGS;"
# Run through each database and execute our CHECK TABLE command for all tables
# in a single pass - eyechart
for i in $dbnames ; do
	# echo the database we are working on
	echo "Database being checked:"
	mysql --defaults-file="$OPTIONS_FILE" -t --host=$dbhost $i -e "SHOW DATABASES LIKE '$i';"
	
	# Check all tables in one pass, instead of a loop
	# Use AWK to put in comma separators, use SED to remove trailing comma
	# Modified to only check MyISAM or InnoDB tables - eyechart
	dbtables="$(mysql --defaults-file="$OPTIONS_FILE" --host=$dbhost $i --batch -N -e "SHOW TABLE STATUS;" | awk 'BEGIN {ORS=", " } $2 == "MyISAM" || $2 == "InnoDB"{print "\`" $1 "\`"}' | sed 's/, $//')"
	
	# Output in table form using -t option
	if [ ! "$dbtables" ] ; then
		echo "NOTE: There are no tables to check in the $i database - skipping..."; echo; echo
	else
		mysql --defaults-file="$OPTIONS_FILE" --host=$dbhost -t $i -e "CHECK TABLE $dbtables $type1 $type2;"; echo; echo
	fi
done
# Unlock tables
mysql --defaults-file="$OPTIONS_FILE" --host=$dbhost --batch -N -e "UNLOCK TABLES;"

exec 1>&6 6>&- # Restore stdout and close file descriptor #6

# test our logfile for corruption in the database...
for i in $(cat $logfile) ; do
	if [ $i = "warning" ] ; then
		corrupt=yes
	elif [ $i = "error" ] ; then
		corrupt=yes
	fi
done

# Send off our results...
if [ $corrupt = "yes" ] ; then
	cat $logfile | mail -s "MySQL CHECK Log [ERROR FOUND] for $dbhost-$(date)" $mailto
else
	cat $logfile | mail -s "MySQL CHECK Log [PASSED OK] for $dbhost-$(date)" $mailto
fi

